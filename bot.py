import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

API_TOKEN = '8037462495:AAFUH6j3QfhUtGodikTQCmbetE8owlknv4o'
START_STICKER = "1"
EXPLOSION_STICKER = "2"
WINNING_STICKER = "3"

WATERMARK = "\n\n–æ—Ñ–∏—Ü—ã–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≥–∫"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

games = {}


def add_menu_btn(keyboard):
    new_buttons = keyboard.inline_keyboard.copy()
    new_buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")])
    return InlineKeyboardMarkup(inline_keyboard=new_buttons)


def end_kb():
    buttons = [
        InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –µ—â—ë", callback_data="play"),
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


class Game:
    def __init__(self, user_id, mines_count):
        self.user_id = user_id
        self.mines_count = mines_count
        self.rows = 4
        self.cols = 4
        self.total = self.rows * self.cols
        self.safe_count = self.total - mines_count
        self.opened = [[False for _ in range(self.cols)] for _ in range(self.rows)]
        self.mines = [[False for _ in range(self.cols)] for _ in range(self.rows)]

        mine_positions = random.sample(range(self.total), mines_count)
        for pos in mine_positions:
            r = pos // self.cols
            c = pos % self.cols
            self.mines[r][c] = True

        self.lost = False
        self.won = False

    def open_cell(self, r, c):
        if self.opened[r][c]:
            return "already"
        self.opened[r][c] = True

        if self.mines[r][c]:
            self.lost = True
            return "mine"
        else:
            opened_safe = sum(
                1 for i in range(self.rows)
                for j in range(self.cols)
                if self.opened[i][j] and not self.mines[i][j]
            )
            if opened_safe == self.safe_count:
                self.won = True
            return "safe"

    def make_board(self, show_all=False):
        buttons = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                text = "‚ùì"
                cb = f"cell_{i}_{j}"
                if self.opened[i][j] or show_all:
                    if self.mines[i][j]:
                        text = "üí£"
                    else:
                        text = "üíé"
                    cb = "ignore"
                row.append(InlineKeyboardButton(text=text, callback_data=cb))
            buttons.append(row)

        if self.won:
            buttons.append([InlineKeyboardButton(text="‚ú® –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à", callback_data="collect")])

        buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)


def mines_kb():
    buttons = [
        InlineKeyboardButton(text=f"{mines} –º–∏–Ω üí•", callback_data=f"mines_{mines}")
        for mines in [2, 4, 8]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    return add_menu_btn(kb)


def play_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play")]
    ])
    return add_menu_btn(kb)


@dp.message(Command(commands=["start"]))
async def start(msg: Message):
    await msg.answer_sticker(sticker=START_STICKER)
    txt = (
            f"<b>–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!</b> üöÄ\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <i>–∏–≥—Ä—É ¬´–ú–∏–Ω—ã¬ª</i> ‚Äì —ç–ø–∏—á–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ö–æ–¥ –ø–æ–ª–æ–Ω –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤! üòé\n\n"
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º: –∑–∞ –∫–∞–∂–¥—ã–º –ø–æ–≤–æ—Ä–æ—Ç–æ–º –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–æ–∫—Ä–æ–≤–∏—â–µ, —Ç–∞–∫ –∏ –æ–ø–∞—Å–Ω–∞—è –º–∏–Ω–∞! üí•\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!" + WATERMARK
    )
    await msg.answer(txt, reply_markup=play_kb())


@dp.message(Command(commands=["help"]))
async def help(msg: Message):
    txt = (
            "<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ ¬´–ú–∏–Ω—ã¬ª:</b> ü§ì\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ò–≥—Ä–∞—Ç—å¬ª</b> –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã. üéÆ\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω (–æ—Ç 2 –¥–æ 8). –ß–µ–º –±–æ–ª—å—à–µ –º–∏–Ω ‚Äì —Ç–µ–º –≤—ã—à–µ —Ä–∏—Å–∫ –∏ –Ω–∞–≥—Ä–∞–¥–∞! üí•\n"
            "3. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏ –ø–æ–ª—è: –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞, –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç —Å–≤–µ—Ä–∫–∞—é—â–∏–π –∞–ª–º–∞–∑ <b>üíé</b>.\n"
            "4. –ï—Å–ª–∏ –≤—ã –æ—Ç–∫—Ä–æ–µ—Ç–µ –∫–ª–µ—Ç–∫—É —Å –º–∏–Ω–æ–π <b>üí£</b>, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞, –∞ –∑–∞—Ç–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ ‚Äì –±—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω—ã! üò±\n"
            "5. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞–∂–º–∏—Ç–µ <b>¬´‚ú® –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à¬ª</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É (–≤—ã–∏–≥—Ä—ã—à = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω * 100 –æ—á–∫–æ–≤). üèÜ" + WATERMARK
    )
    await msg.answer(txt, reply_markup=play_kb())


@dp.callback_query(F.data == "menu")
async def menu(cb: CallbackQuery):
    txt = (
            "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üåü\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:" + WATERMARK
    )
    await cb.message.answer(txt, reply_markup=play_kb())
    await cb.answer()


@dp.callback_query(F.data == "play")
async def play(cb: CallbackQuery):
    txt = (
            "<b>–í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b> üî•\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω. –ß–µ–º –±–æ–ª—å—à–µ –º–∏–Ω ‚Äì —Ç–µ–º —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–µ–µ –∏–≥—Ä–∞, –Ω–æ –∏ –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –≤—ã—à–µ, –µ—Å–ª–∏ —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üöÄ" + WATERMARK
    )
    kb = mines_kb()
    await cb.message.answer(txt, reply_markup=kb)
    await cb.answer()


@dp.callback_query(F.data.startswith("mines_"))
async def set_mines(cb: CallbackQuery):
    try:
        mines = int(cb.data.split("_")[1])
    except:
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–∏–Ω! üòï")
        return

    user_id = cb.from_user.id
    game = Game(user_id, mines)
    games[user_id] = game
    txt = (
            "<b>–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã</b> üé≤\n\n"
            "–ö–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–≥–∞–¥–∫—É... –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã: –∑–∞ –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö –º–æ–∂–µ—Ç –∫—Ä—ã—Ç—å—Å—è –º–∏–Ω–∞! üí£\n\n"
            "–ü—É—Å—Ç—å —É–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –∏ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –Ω–µ—Å–º–µ—Ç–Ω—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞! üíé" + WATERMARK
    )
    await cb.message.answer(txt, reply_markup=game.make_board())
    await cb.answer()


@dp.callback_query(F.data.startswith("cell_"))
async def cell(cb: CallbackQuery):
    user_id = cb.from_user.id
    if user_id not in games:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã. üòï", show_alert=True)
        return

    game = games[user_id]
    if game.lost or game.won:
        await cb.answer("–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞! üö´")
        return

    try:
        _, r, c = cb.data.split("_")
        r = int(r)
        c = int(c)
    except:
        await cb.answer("–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç! üîß")
        return

    result = game.open_cell(r, c)
    if result == "mine":
        board = game.make_board(show_all=True)
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=cb.message.message_id,
            reply_markup=board
        )
        try:
            await bot.send_sticker(user_id, sticker=EXPLOSION_STICKER)
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        txt = (
                "<b>–û–π!</b> –í—ã —Ä–∞—Å–∫—Ä—ã–ª–∏ –º–∏–Ω—É <b>üí£</b> –∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤–∑—Ä—ã–≤... –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. üò¢\n"
                "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?" + WATERMARK
        )
        await bot.send_message(user_id, txt, reply_markup=end_kb())
        games.pop(user_id)
    else:
        board = game.make_board()
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=cb.message.message_id,
            reply_markup=board
        )
        if game.won:
            try:
                await bot.send_sticker(user_id, sticker=WINNING_STICKER)
            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
            txt = (
                    "<b>–í–∞—É!</b> –í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã, –∏ –≤—ã –Ω–∞—à–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞! üéâ\n"
                    "–ù–∞–∂–º–∏—Ç–µ <b>¬´‚ú® –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à¬ª</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –∑–∞—Å–ª—É–∂–µ–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É. üèÜ" + WATERMARK
            )
            await bot.send_message(user_id, txt)
    await cb.answer()


@dp.callback_query(F.data == "collect")
async def collect(cb: CallbackQuery):
    user_id = cb.from_user.id
    if user_id not in games:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! üòï")
        return

    game = games[user_id]
    if not game.won:
        await cb.answer("–í—ã –µ—â—ë –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏! ü§î")
        return

    win = game.mines_count * 100
    txt = (
            f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{win}</b> –æ—á–∫–æ–≤! üèÜ\n"
            "–í–∞—à–∏ —Å–º–µ–ª–æ—Å—Ç—å –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å–ª–∏ –≤–∞–º –ø–æ–±–µ–¥—É! üéä\n"
            "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?" + WATERMARK
    )
    await bot.send_message(user_id, txt, reply_markup=end_kb())
    games.pop(user_id)
    await cb.answer()


@dp.callback_query(F.data == "ignore")
async def ignore(cb: CallbackQuery):
    await cb.answer()


async def main():
    try:
        log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()
        log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    asyncio.run(main())
